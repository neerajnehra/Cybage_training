Core java
--> software setup 
--> jdk 
--> editor --> eclipse, sts, intellij, vs code --> STS
--> server --> tomcat
--> database --> mysql

 


program creation
1. create project
2. package  e.g. reverse of domain name    cybage.com --> com.cybage
        hsbc.net --> net.hsbc
3. create class

 


.java --> for developers
.class --> for end users(client)

 

hdfc bank
--> developers --> cybage(.java)
--> on hdfc bank server(end user, client) --> deploy(.class)

 


variables
data types
whole number --> byte, short, int long
decimal number --> float(IEEE floating type format ) , double (stored using java standard)
boolean --> true , false
char --> english(ascii), german, chineese, hindi, marathi--> unicode characters
unicode --> ascii + character from different languages
String

 


in java
everything is in terms of class and object

 


go to Arrays --> hold ctrl key   --> click

 


operators
arithmetic --> + , -
bitwise --> |, &
assignment --> =, +=, -=, etc
comparison--> >, <, <=, !=
logical --> &&, ||, !
ternary->         condition? logic if condition is true: logic if condition is false
misc
operator priority--> () ,,,,, =

 


a += 10 -----> a=a+10
a<<=3

 


x  = 10
3
x != 3

 

10 ---> 1010
3 ---->  0011
------------------
              1011    

 


javac

 

desktop application --> jar file
web based application --> war file

 

---------------------------------------------------------------------------------------------------------------------------------------
day2
object oriented features
--> object, classes
--> encapsulation
--> inheritance
--> polymorphism
--> abstraction

 

employee management
--> employee object
--> structure of employee --> class
--> properties --> empid, empname, address, email, phone, salary, pension, etc
--> method --> display

 


class
object
access modifiers(public, private)
constructor
constructor overloading
encapsulation: properties should be private, method should be public
this
toString

 

inheritance
--> creating parent child relationship
--> useful for reusability
--> we get all properties from parent, we can modify behaviour from parent, can add new properties

 


polymorphism
--> ability to act in more than one form
--> compile time polymorphism --> constructor/method overloading
--> runtime polymorphism --> overriding methods from super class

 

Object --> Employee --> (RegularEmployee, RetiredEmployee)

 

abstraction
--> it is for showing essentials details(interface) and hiding implementations(class)
--> hiding --> security, privacy

 


1. ui ( main method ) --> service    ====> for desktop application without db
2. ui --> main method --> service --> dao --> db   ====> for desktop application with db

 

3. ui --> controller --> service --> dao --> db   ====> for web based application with db
4. ui --> controller --> service   ====> for web based application without db

 


---------------------------------------------------------------------------------------------------------
exception handling
--> exception means unexpected problem
--> dealing with unexpected problem is known as exception handling
--> exception handling with 5 keywords: try, catch, finally, throw, throws
--> java provides various classes to deal with exception
--> if predefined classes are not enough for exception handling then we can go for custom exception

 

--> Exception: these are runtime problem due to programming logic, exception are in the control of
programmer
--> Error: these are runtime problems due to runtime environment(power failure, low memory, network
connectivity), errors are not in control of programmer

 


unchecked--> if your program doesnot depends on external resources then kind of exception is known as
unchecked exception
checked--> if program depends external resources then kind of exception is known as checked exception
resources: file, network, database, etc

 

 

final --> keyword for creating constant 
finally --> it is block which executed at the end of try catch
finalize --> it is method for garbage collection

 

----------------------------------------------------------------------------------------------------------------------------------
input/output
--> input is about taking data to program--> e.g. keyboard, mouse, scanner, file, network connection, mic, etc
--> output is showing data --> e.g. monitor, printer, speaker, file, network connection, etc

 

input  -->  program     -->  output

 

input to program data will be carried by stream --> input stream --> System.in
program to output will be carried by stream --> output stream --> System.out

 


byte stream
--> useful to read binary data e.g. image, object, .exe, video, ascii
--> byte stream api
InputStream --> FileInputStream, ByteArrayInputStream, FilterInputStream, ObjectInputStream
OutputStream --> FileOutputStream, ByteArrayOutputStream, FilterOutputStream, ObjectOUtputSTream

 

character stream 
--> data from different languages can be processed by character
Reader --> FileReader, CharArrayReader, FilterREader, BufferedReader
Writer --> FileWriter, CharArrayWriter, FilterWriter, BufferedWriter

 


ui --> main method --> service --> dao --> file(db)   ====> for desktop application with db

 

front end :- html, css, js, jquery, angular, bootstrap, sass, rwd, material ui

 

back end :- java, jsp/servlet, spring core, spring mvc, spring data jpa, spring rest, ,spring security, 

 

database:- mysql/oracle/posgresql

 

coding standards

 

tools:- git, maven, sonarqube, jenkins

 


buffer  (system buffer)--> temp storage

 

input(file, hdd) --(store data in buffer)----> program(ram)

 


annotations
--> it is additional information to variables, class, methods, interface
--> information will be useful for developer(source), compiler, jvm 
--> custom annotations

 

-------------------------------------------------------------------------------------------------------------------------------------------
collection framework
--> it is about set/group/collection of object
--> java will provide different api to deal with group of object
--> it is also considered as in memory database(RAM)

 


List
--> list of elements
--> duplication allowed
--> sequence maintained
--> can be access using index
    ArrayList
        --> dynamic array for storage
        --> sequential memory location
        --> for addition/deletion of element we need to shift
        --> if we have less addition / deletion then arraylist is efficient
    LinkedList
        --> it will use doubly linked list for storage
        --> random memory location
        --> for addition/deletion of element no need to shift
        --> if we have frequent addition / deletion then linkedlist is efficient

 

swift

 

reg: Mh12GH1234, red

 

reg: mh12gh1234, red

 


==  --> compare only reference
equals --> will compare values inside object

 

 

1. comparing --> developer
2. swapping --> api

 


----------------------------------------------------------------------------------------------------------------------------
collection framework
set
--> it is collection of elements
--> duplicates are not allowed
--> sequence may or may not be maintained
--> sorting may or may not be done
--> no index based access
    --> hashset: it uses hashing for storing elements, sequence not maintained , no sorting
    --> linkedhashset: it uses hashing for storing elements, sequence maintained , no sorting
    --> treeset: it will sort elements

 

 

== --> it will check only reference 
equals --> will check actual contents of object --> Override equals methods

 

comparator / comparable --> will check whether first value is greater than/less than/equals to other value --> by
implementing comparable or comparator interface

 


map
--> it is collection of elements
--> every elements has key attached to it
--> key: value
--> key should be unique, value may or may not be unique
--> sequence may or may not be maintained
--> sorting may or may not be done
--> only one null value allowed in key, but in value null can be for many times
    HashMap--> internally uses hashing for storage(key), sequence not maintained, no sorting, not         
synchronized(not good for multithreaded program)
    LinkedHashMap--> internally uses hashing for storage(key), sequence maintained, no sorting
    TreeMap --> it provide sorting based on keys
    HashTable--> it is like hashmap, but synchronized(it supports for multithreading )

 


--------------------------------------------------------------------------------------------------------------------------------------------
wrapper classes
--> 
String pool
integer pool
byte pool
short pool
float pool
double pool
long pool
char pool
boolean pool

 

annotations
--> additional information to program / compiler/ jvm (meta data)
--> additional information to programs can be given using comments
--> e.g. override, deprecated, suppresswarning
--> custom annotations

 

questions?
--> 
--------------------------------------------------------------------------------------------------------------------------------------------
multithreading
--> executing multiple threads at same
--> number of threads  that can start for application --> many threads
--> ideal number of threads--> one per processor(4) --> 4
--> windows --> win32 api
--> c/c++  --> pthread
--> java --> java thread library (Thread class)
--> priority --> importance 

 


tool
--> jmc
--> jconsole
--> jvisualvm

 


synchronization
--> if we sharing certain data to multiple thread
--> 

 

thread 1 --> 0, 10, 20, 30, 40
thread 2 --> 0, 25, 50, 75, 100

 


interthread communication

 


thread pool 
--> it is collection of thread objects
--> whenever want to execute certain task , we can pick up one of the thread from thread pool and complete task

 

project --> feb 2021 --> 6 months --> july 2021
cybage --> resources --> 25 resources , but currently all employee are busy in different project
cybage hr --> send ad through naukri ,--> 25 resources
interview
needs  2 months  for joining
induction --> 3 days
training
tag into project
project kt
actual work will be started
--> six months

 


questions?
-->